/* Additional includes go here */

#include <stdio.h>
#include <stdlib.h>

<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
    OperatorMetrics & opm = getContext().getMetrics();

    this->isConnected = &opm.createCustomMetric("isConnected", "Is there an active connection to the NATS server", Metric::Gauge);
    this->nDisconnects = &opm.createCustomMetric("nDisconnects", "Number of times disconnected from the NATS server", Metric::Counter);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR()
{
}

// Notify port readiness
void MY_OPERATOR::allPortsReady()
{
    createThreads(1);
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown()
{
}

<%

my $outputAttribute = "";
if (defined $model->getOutputPortAt(0)) {
    sub getOutputAttribute {
        my $outputPort = $model->getOutputPortAt(0);

        for my $attribute (@{$outputPort->getAttributes()}) {
            if (SPL::CodeGen::Type::isBlob($attribute->getSPLType())) {
                return $attribute->getName();
            }
        }

        die("No blob attribute on output port");
    }

    $outputAttribute = getOutputAttribute();
} else {
    die("Need to have an output port attached");
}

%>

// Processing for source and threaded operators
void MY_OPERATOR::process(uint32_t idx)
{
  natsOptions_Create(&(this->opts));

  // set up the initial connection
  std::string hostname = <%=$model->getParameterByName("hostname")->getValueAt(0)->getCppExpression()%>;
  int port = <%=$model->getParameterByName("port")->getValueAt(0)->getCppExpression()%>;
  // TODO fail if port is out of bounds

  char * portString = new char[6];
  memset(portString, 0, 6);
  snprintf(portString, 6, "%d", port);

  <% if (defined $model->getParameterByName("token")) { %>
      std::string token = <%=$model->getParameterByName("token")->getValueAt(0)->getCppExpression()%>;
      std::string url = "nats://" + token + "@" + hostname + ":" + std::string(portString);
  <% } else { %>
      std::string url = "nats://" + hostname + ":" + std::string(portString);
  <% } %>

  natsOptions_SetURL(this->opts, url.c_str());

  <% if (defined $model->getParameterByName("trustedCertificates")) { %>
    natsOptions_LoadCATrustedCertificates(this->opts, <%=$model->getParameterByName("trustedCertificates")->getValueAt(0)->getCppExpression()%>);
  <% } %>

  <% if (defined $model->getParameterByName("certificateFile") and defined $model->getParameterByName("privateKey")) { %>
    <% my $certificateFile = $model->getParameterByName("certificateFile")->getValueAt(0)->getCppExpression(); %>
    <% my $privateKey = $model->getParameterByName("privateKey")->getValueAt(0)->getCppExpression(); %>
    natsOptions_LoadCertificatesChain(this->opts, <%=$certificateFile%>, <%=$privateKey%>);
  <% } %>

  <% if (defined $model->getParameterByName("isSecure")) { %>
      natsOptions_SetSecure(this->opts, <%=$model->getParameterByName("isSecure")->getValueAt(0)->getCppExpression()%>);
  <% } %>

  <% if (defined $model->getParameterByName("skipVerification")) { %>
      natsOptions_SkipServerVerification(this->opts, <%=$model->getParameterByName("skipVerification")->getValueAt(0)->getCppExpression()%>);
  <% } %>

  <% if (defined $model->getParameterByName("allowReconnect")) { %>
    natsOptions_SetAllowReconnect(this->opts, <%=$model->getParameterByName("allowReconnect")->getValueAt(0)->getCppExpression()%>);
  <% } %>

  <% if (defined $model->getParameterByName("reconnectAttempts")) { %>
      natsOptions_SetMaxReconnect(this->opts, <%=$model->getParameterByName("reconnectAttempts")->getValueAt(0)->getCppExpression()%>);
  <% } %>

  <% if (defined $model->getParameterByName("reconnectDelay")) { %>
      natsOptions_SetReconnectWait(this->opts, <%=$model->getParameterByName("reconnectDelay")->getValueAt(0)->getCppExpression()%>);
  <% } %>

  natsOptions_SetClosedCB(this->opts, MY_OPERATOR::closedCb, (void *) this);
  natsOptions_SetDisconnectedCB(this->opts, MY_OPERATOR::disconnectedCb, (void *) this);
  natsOptions_SetReconnectedCB(this->opts, MY_OPERATOR::reconnectedCb, (void *) this);

  natsConnection_Connect(&(this->conn), this->opts);

  <% my $subject = $model->getParameterByName("subject")->getValueAt(0)->getCppExpression(); %>
  <% if (defined $model->getParameterByName("queueGroup")) { %>
      std::string queueGroup = <%=$model->getParameterByName("queueGroup")->getValueAt(0)->getCppExpression()%>;
      natsConnection_QueueSubscribeSync(&(this->sub), this->conn, <%=$subject%>.c_str(), queueGroup.c_str());
  <% } else { %>
      natsConnection_SubscribeSync(&(this->sub), this->conn, <%=$subject%>.c_str());
  <% } %>

  natsStatus status;
  OPort0Type outTuple;
  while(!getPE().getShutdownRequested()) {
      status = natsSubscription_NextMsg(&(this->msg), this->sub, 1000);

      if (status == NATS_OK && this->msg != NULL) {
          const char * data = natsMsg_GetData(this->msg);
          int dataLength = natsMsg_GetDataLength(this->msg);
          outTuple.set_<%=$outputAttribute%>(SPL::blob((unsigned char *) data, dataLength));
          submit(outTuple, 0);
      }

      natsMsg_Destroy(this->msg);
      this->msg = NULL;
  }

  natsSubscription_Unsubscribe(this->sub);
  natsSubscription_Destroy(this->sub);

  natsOptions_Destroy(this->opts);
  natsConnection_Destroy(this->conn);
}

// Tuple processing for mutating ports
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}

void MY_OPERATOR::closedCb(natsConnection * nc, void * closure) {
    SPLAPPTRC(L_INFO, "[NatsSubscribe] Connection closed", "");

    MY_OPERATOR * opInstance = (MY_OPERATOR *) closure;
    opInstance->isConnected->setValue(0);
}

void MY_OPERATOR::disconnectedCb(natsConnection * nc, void * closure) {
    SPLAPPTRC(L_INFO, "[NatsSubscribe] Disconnected from server", "");

    MY_OPERATOR * opInstance = (MY_OPERATOR *) closure;
    opInstance->isConnected->setValue(0);
    opInstance->nDisconnects->incrementValue(1);
}

void MY_OPERATOR::reconnectedCb(natsConnection * nc, void * closure) {
    SPLAPPTRC(L_INFO, "[NatsSubscribe] Reconnected to server", "");

    MY_OPERATOR * opInstance = (MY_OPERATOR *) closure;
    opInstance->isConnected->setValue(1);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

