/* Additional includes go here */
using namespace std;
<%SPL::CodeGen::implementationPrologue($model);%>

// Constructor
MY_OPERATOR::MY_OPERATOR()
{
    OperatorMetrics & opm = getContext().getMetrics();
    this->isConnected = &opm.createCustomMetric("isConnected", "Is there an active connection to the NATS server", Metric::Gauge);
    this->nDisconnects = &opm.createCustomMetric("nDisconnects", "Number of times disconnected from the NATS server", Metric::Counter);
}

// Destructor
MY_OPERATOR::~MY_OPERATOR()
{
}

// Notify port readiness
void MY_OPERATOR::allPortsReady()
{
  natsOptionsCreateStatus = natsOptions_Create(&(this->opts));
  if (natsOptionsCreateStatus == NATS_OK) {
      SPLAPPTRC(L_INFO, "[NatsPublish] Publish options successfully created.", "");
      setupConnection();
   } else {
       SPLAPPTRC(L_ERROR, "[NatsPublish] Received invalid nats options", "");
       throw std::invalid_argument( "[NatsPublish] Received invalid nats options" );
   }
}

void MY_OPERATOR::setupConnection()
{
    // set up the initial connection
    std::string hostname = <%=$model->getParameterByName("hostname")->getValueAt(0)->getCppExpression()%>;
    int port = <%=$model->getParameterByName("port")->getValueAt(0)->getCppExpression()%>;
    // TODO fail if port is out of bounds
    char * portString = new char[6];
    memset(portString, 0, 6);
    snprintf(portString, 6, "%d", port);

    <% if (defined $model->getParameterByName("token")) { %>
        std::string token = <%=$model->getParameterByName("token")->getValueAt(0)->getCppExpression()%>;
        std::string url = "nats://" + token + "@" + hostname + ":" + std::string(portString);
        <% } else { %>
        std::string url = "nats://" + hostname + ":" + std::string(portString);
        <% } %>

    natsOptions_SetURL(this->opts, url.c_str());

    <% if (defined $model->getParameterByName("trustedCertificates")) { %>
        natsOptions_LoadCATrustedCertificates(this->opts, <%=$model->getParameterByName("trustedCertificates")->getValueAt(0)->getCppExpression()%>);
        <% } %>

    <% if (defined $model->getParameterByName("certificateFile") and defined $model->getParameterByName("privateKey")) { %>
        <% my $certificateFile = $model->getParameterByName("certificateFile")->getValueAt(0)->getCppExpression(); %>
        <% my $privateKey = $model->getParameterByName("privateKey")->getValueAt(0)->getCppExpression(); %>
        natsOptions_LoadCertificatesChain(this->opts, <%=$certificateFile%>, <%=$privateKey%>);
        <% } %>

    <% if (defined $model->getParameterByName("isSecure")) { %>
        natsOptions_SetSecure(this->opts, <%=$model->getParameterByName("isSecure")->getValueAt(0)->getCppExpression()%>);
        <% } %>

    <% if (defined $model->getParameterByName("skipVerification")) { %>
        natsOptions_SkipServerVerification(this->opts, <%=$model->getParameterByName("skipVerification")->getValueAt(0)->getCppExpression()%>);
        <% } %>

    <% if (defined $model->getParameterByName("allowReconnect")) { %>
        natsOptions_SetAllowReconnect(this->opts, <%=$model->getParameterByName("allowReconnect")->getValueAt(0)->getCppExpression()%>);
        <% } %>

    <% if (defined $model->getParameterByName("reconnectAttempts")) { %>
        natsOptions_SetMaxReconnect(this->opts, <%=$model->getParameterByName("reconnectAttempts")->getValueAt(0)->getCppExpression()%>);
        <% } %>

    <% if (defined $model->getParameterByName("reconnectDelay")) { %>
        natsOptions_SetReconnectWait(this->opts, <%=$model->getParameterByName("reconnectDelay")->getValueAt(0)->getCppExpression()%>);
        <% } %>

    natsOptions_SetClosedCB(this->opts, MY_OPERATOR::closedCb, (void *) this);
    natsOptions_SetDisconnectedCB(this->opts, MY_OPERATOR::disconnectedCb, (void *) this);
    natsOptions_SetReconnectedCB(this->opts, MY_OPERATOR::reconnectedCb, (void *) this);
    connectionStatus = natsConnection_Connect(&(this->conn), this->opts);

    if (connectionStatus == NATS_OK) {
        SPLAPPTRC(L_INFO, "[NatsPublish] Successfully connected to nats server", "");
    } else {
        SPLAPPTRC(L_ERROR, "[NatsPublish] " << natsStatus_GetText(connectionStatus), "");
        throw std::runtime_error(natsStatus_GetText(connectionStatus));
    }
}

// Notify pending shutdown
void MY_OPERATOR::prepareToShutdown()
{
}

// Processing for source and threaded operators
void MY_OPERATOR::process(uint32_t idx)
{
}

// Tuple processing for mutating ports
void MY_OPERATOR::process(Tuple & tuple, uint32_t port)
{
}

// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    <% my $content = $model->getParameterByName("content")->getValueAt(0)->getCppExpression(); %>
    <% my $subject = $model->getParameterByName("subject")->getValueAt(0)->getCppExpression(); %>
    SPL::blob content = <%=SPL::CodeGen::adaptCppExpression($content, "tuple")%>;
    natsPublishStatus = natsConnection_Publish(this->conn, <%=$subject%>.c_str(), content.getData(), content.getSize());

    if (natsPublishStatus == NATS_OK) {
        SPLAPPTRC(L_DEBUG, "[NatsPublish] Successfully published message", "");
    } else {
        SPLAPPTRC(L_ERROR, "[NatsPublish] " << natsStatus_GetText(natsPublishStatus) , "");
        throw std::runtime_error(natsStatus_GetText(natsPublishStatus));
    }
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
}

void MY_OPERATOR::closedCb(natsConnection * nc, void * closure) {
    SPLAPPTRC(L_INFO, "[NatPublish] Connection closed", "");
    MY_OPERATOR * opInstance = (MY_OPERATOR *) closure;
    opInstance->isConnected->setValue(0);
}

void MY_OPERATOR::disconnectedCb(natsConnection * nc, void * closure) {
    SPLAPPTRC(L_WARN, "[NatPublish] Disconnected from server", "");

    MY_OPERATOR * opInstance = (MY_OPERATOR *) closure;
    opInstance->isConnected->setValue(0);
    opInstance->nDisconnects->incrementValue(1);
}

void MY_OPERATOR::reconnectedCb(natsConnection * nc, void * closure) {
    SPLAPPTRC(L_WARN, "[NatsPublish] Reconnected to server", "");

    MY_OPERATOR * opInstance = (MY_OPERATOR *) closure;
    opInstance->isConnected->setValue(1);
}

<%SPL::CodeGen::implementationEpilogue($model);%>

